#!/bin/bash
# Pre-commit hook to enforce V2 store migration requirements
# This prevents commits that introduce legacy store usage

echo "üîÑ Checking V2 Store Migration Compliance..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Files to check (staged files only)
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ts|tsx)$')

if [ -z "$STAGED_FILES" ]; then
    echo "‚úÖ No TypeScript/React files staged for commit"
    exit 0
fi

# Legacy store patterns that are now forbidden
LEGACY_STORES=(
    "useAppStore"
    "useStoryletStore" 
    "useClueStore"
    "useMinigameStore"
    "useNPCStore"
    "useStoryletCatalogStore"
    "useSaveStoreV2"
    "useCharacterStore"
)

# Check for legacy store imports
VIOLATIONS_FOUND=false

echo "üìã Checking staged files for legacy store usage..."

for file in $STAGED_FILES; do
    # Skip files in certain directories
    if [[ "$file" =~ ^(src/stores/|src/test/|\.githooks/|deprecated/) ]]; then
        continue
    fi
    
    echo "   Checking: $file"
    
    for store in "${LEGACY_STORES[@]}"; do
        # Check if file contains legacy store imports
        if git show ":$file" | grep -q "import.*$store\|from.*$store"; then
            echo -e "${RED}‚ùå VIOLATION: $file uses legacy store: $store${NC}"
            VIOLATIONS_FOUND=true
        fi
    done
done

# Check for mixed usage patterns (both legacy and V2 in same file)
echo "üîç Checking for mixed usage patterns..."

for file in $STAGED_FILES; do
    if [[ "$file" =~ ^(src/stores/|src/test/|\.githooks/|deprecated/) ]]; then
        continue
    fi
    
    HAS_LEGACY=false
    HAS_V2=false
    
    # Check for any legacy store
    for store in "${LEGACY_STORES[@]}"; do
        if git show ":$file" | grep -q "import.*$store\|from.*$store"; then
            HAS_LEGACY=true
            break
        fi
    done
    
    # Check for V2 stores
    if git show ":$file" | grep -q "useCoreGameStore\|useNarrativeStore\|useSocialStore"; then
        HAS_V2=true
    fi
    
    # Report mixed usage
    if [ "$HAS_LEGACY" = true ] && [ "$HAS_V2" = true ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  MIXED USAGE: $file uses both legacy and V2 stores${NC}"
        VIOLATIONS_FOUND=true
    fi
done

# Check migration status completeness
echo "üìä Verifying migration status documentation..."

if [ ! -f "MIGRATION_STATUS.md" ]; then
    echo -e "${RED}‚ùå CRITICAL: MIGRATION_STATUS.md not found${NC}"
    VIOLATIONS_FOUND=true
fi

# Final verdict
if [ "$VIOLATIONS_FOUND" = true ]; then
    echo
    echo -e "${RED}üö´ COMMIT REJECTED - V2 Migration Violations Found${NC}"
    echo
    echo "The following issues must be resolved before committing:"
    echo "1. Remove all legacy store imports from production code"
    echo "2. Migrate components to use V2 stores exclusively"
    echo "3. Update MIGRATION_STATUS.md to reflect changes"
    echo
    echo "üìö Migration Guide: See MIGRATION_STATUS.md for detailed requirements"
    echo "üîß Quick Fix: Replace legacy stores with V2 equivalents:"
    echo "   useAppStore ‚Üí useCoreGameStore"
    echo "   useStoryletStore ‚Üí useNarrativeStore"
    echo "   useClueStore ‚Üí useNarrativeStore"
    echo "   useNPCStore ‚Üí useSocialStore"
    echo
    exit 1
else
    echo -e "${GREEN}‚úÖ V2 Migration Compliance: PASSED${NC}"
    echo "All staged files comply with V2 store migration requirements"
    exit 0
fi